"use client";

import { useState } from "react";
import { useRouter } from "next/router"; // –ó–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –ª–æ–≥–∏–Ω

const Login = () => {
  const [usernameOrEmail, setUsernameOrEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const router = useRouter();

  const handleLogin = async (e) => {
    e.preventDefault();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ–ª–µ—Ç–∞—Ç–∞ –Ω–µ —Å–∞ –ø—Ä–∞–∑–Ω–∏
    if (!usernameOrEmail || !password) {
      setErrorMessage("–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞.");
      return;
    }

    try {
      // –ò–∑–ø—Ä–∞—â–∞–º–µ POST –∑–∞—è–≤–∫–∞ –∫—ä–º API-—Ç–æ
      const res = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ usernameOrEmail, password }),
      });

      const data = await res.json();

      if (res.ok) {
        // –°—ä—Ö—Ä–∞–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤ localStorage –∏–ª–∏ cookies
        localStorage.setItem("token", data.token);

        // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –∫—ä–º –¥—Ä—É–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –ª–æ–≥–∏–Ω
        router.push("/dashboard"); // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –ø—Ä–æ—Ñ–∏–ª–∞
      } else {
        setErrorMessage(data.message || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–ª–∏–∑–∞–Ω–µ.");
      }
    } catch (error) {
      console.error(error);
      setErrorMessage("–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å—ä—Å —Å—ä—Ä–≤—ä—Ä–∞.");
    }
  };

  return (
    <div className="bg-white shadow-lg rounded-lg p-8 w-full max-w-lg">
      <h1 className="text-center text-2xl font-bold mb-6">–í–ª–∏–∑–∞–Ω–µ –≤ –ø—Ä–æ—Ñ–∏–ª</h1>
      <form onSubmit={handleLogin} className="flex flex-col space-y-4">
        <input
          type="text"
          placeholder="–ò–º–µ–π–ª –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–æ –∏–º–µ"
          className="border border-gray-300 rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-green-500"
          value={usernameOrEmail}
          onChange={(e) => setUsernameOrEmail(e.target.value)}
        />
        <div className="relative">
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª–∞"
            className="border border-gray-300 rounded-lg p-3 w-full focus:outline-none focus:ring-2 focus:ring-green-500"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <span className="absolute right-4 top-3 text-gray-400 cursor-pointer">
            üëÅ
          </span>
        </div>
        {errorMessage && (
          <div className="text-red-500 text-sm">{errorMessage}</div>
        )}
        <button
          type="submit"
          className="w-full bg-green-500 text-white font-bold py-3 rounded-bl-xl rounded-tr-xl hover:bg-green-600 transition"
        >
          –í—Ö–æ–¥
        </button>
      </form>
    </div>
  );
};

export default Login;
